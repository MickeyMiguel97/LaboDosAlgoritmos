/* C++ implementation of QuickSort */
#include <bits/stdc++.h>
using namespace std;
// Una función para cambiar dos elementos
void swap(int* a, int* b)
{
int t = *a;
*a = *b;
*b = t;
}
/* Esta función toma el último elemento como pivote, lo coloca en su posición
correcta en el arreglo y posiciona todos los elementos menores a la izquierda y los
mayores a la derecha de el mismo*/
int partition (int arr[], int low, int high)
{
int pivot = arr[high]; // pivote
int i = (low - 1); // posición del primer elemento
for (int j = low; j <= high - 1; j++)
{
// Si el el elemento actual es menor que el pivote
if (arr[j] < pivot)
{
i++; // incrementar el index del menor elemento
swap(&arr[i], &arr[j]);
}
}
swap(&arr[i + 1], &arr[high]);
return (i + 1);
}
/* La función principal que corre QuickSort
arr[] --> arreglo a ordenar,
low --> límite inicial,
high --> límite final */
void quickSort(int arr[], int low, int high)
{
if (low < high)
{
/*pi es la partición del índice, arr[p] está en el lugar correcto */
int pi = partition(arr, low, high);
// Ordenando separadamente los elementos antes y después de la
// partición
quickSort(arr, low, pi - 1);
quickSort(arr, pi + 1, high);
}
}
/* Función para imprimir arreglo */
void printArray(int arr[], int size)
{
int i;
for (i = 0; i < size; i++)
cout << arr[i] << " ";
cout << endl;
}
// Código principal para utilizarlo
int main()
{
int x;
int y;// numero de arreglos
int z; //cantidad de arreglos
int v; //posicion de arreglo de datos para el missing number
cout << "Escriba el # de arreglos: ";
cin >> y;
int arry[y]; //arreglo con los datos para el missing number
for(int j = 0; j < y; j++){ // for que pide los datos
    cout << "Escriba el # de datos del arreglo ";
    cout << (j+1);
    cout << " = ";
cin >> x;
int arr[x];
for(int i = 0; i < x; i++){
    cin >> z;
    arr[i] = z;
}
int n = sizeof(arr) / sizeof(arr[0]);
quickSort(arr, 0, n - 1);
arry[v] = arr[x-1]; //arrelgo con los ultimos datos de cada arreglo
v = v + 1;
}//cierre for grande
//
//El siguiente for que toma los ultimos datos 
// guardados en el arreglo y evalua para sacar el missing number
for(int a = 0; a < y; a++) 
if (arry[a]%2 == 0){
    cout << "Missing number= "; // si es par
    cout << (arry[a]+2);
    cout << " \n";
}else{
    cout << "Missing number= "; // si es impar
    cout << (arry[a]+1);
    cout << " \n";
}// cierre else
return 0;
}// cierre main
